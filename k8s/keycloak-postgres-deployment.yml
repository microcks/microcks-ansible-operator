kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{name}}-keycloak-postgresql"
  namespace: '{{ meta.namespace }}'
  labels:
    app: "{{name}}"
    container: keycloak-postgresql
    group: microcks
    app.kubernetes.io/name: microcks-keycloak-postgresql
    app.kubernetes.io/instance: "microcks-keycloak-postgresql-{{name}}"
    app.kubernetes.io/version: "{{version}}"
    app.kubernetes.io/component: keycloak-postgresql
    app.kubernetes.io/part-of: "{{name}}"
    app.kubernetes.io/managed-by: microcks-operator
    app.openshift.io/runtime: postgresql
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector: 
    matchLabels:  
      app: "{{name}}"
      deploymentconfig: keycloak-postgresql
      container: keycloak-postgresql
      group: microcks
  template:
    metadata:
      labels:
        app: "{{name}}"
        deploymentconfig: keycloak-postgresql
        container: keycloak-postgresql
        group: microcks
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: keycloak-postgresql
        image: {{keycloak.postgres_image}}
        args: ["-c", "max_connections=100", "-c", "shared_buffers=12MB"]
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - psql 127.0.0.1 -U ${POSTGRES_USER} -q -d ${POSTGRES_DB} -c 'SELECT 1'
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "{{name}}-keycloak-admin"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "{{name}}-keycloak-admin"
        - name: POSTGRES_DB
          value: root
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
          - name: "{{name}}-keycloak-postgresql-data"
            mountPath: "/var/lib/pgsql/data"
            subPath: pgdata
      volumes:
      - name: "{{name}}-keycloak-postgresql-data"
        {% if keycloak.persistent %}persistentVolumeClaim:
          claimName: "{{name}}-keycloak-postgresql"
        {% else %}emptyDir:
          medium: ''
        {% endif %}