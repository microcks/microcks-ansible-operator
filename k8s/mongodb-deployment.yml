kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{name}}-mongodb"
  namespace: '{{ meta.namespace }}'
  labels:
    app: "{{name}}"
    container: mongodb
    group: microcks
    app.kubernetes.io/name: microcks-mongodb
    app.kubernetes.io/instance: "microcks-mongodb-{{name}}"
    app.kubernetes.io/version: "{{version}}"
    app.kubernetes.io/component: mongodb
    app.kubernetes.io/part-of: "{{name}}"
    app.kubernetes.io/managed-by: microcks-operator
    app.openshift.io/runtime: mongodb
  creationTimestamp:
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector: 
    matchLabels:  
      app: "{{name}}"
      deploymentconfig: mongodb
      container: mongodb
      group: microcks
  template:
    metadata:
      labels:
        app: "{{name}}"
        deploymentconfig: mongodb
        container: mongodb
        group: microcks
    spec:
      {% if 'route.openshift.io' not in api_groups -%}
      securityContext:
        runAsUser: 184
        runAsGroup: 184
        fsGroup: 184
      {% endif -%}
      containers:
      - name: mongodb
        image: {{mongodb.image}}
        args: ["--dbpath","/var/lib/mongodb/data"]
        ports:
        - name: mongodb
          containerPort: 27017
          protocol: TCP
        env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: "{{name}}-mongodb-connection"
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "{{name}}-mongodb-connection"
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              secretKeyRef:
                key: adminUsername
                name: "{{name}}-mongodb-connection"
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: adminPassword
                name: "{{name}}-mongodb-connection"
          - name: MONGO_INITDB_DATABASE
            value: "{{name}}"
        resources:
          {{ mongodb.resources | to_nice_yaml(indent=10) | trim | indent(10) }}
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 3
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - mongo 127.0.0.1:27017/$MONGO_INITDB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
              --eval="quit()"
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 27017
        volumeMounts:
        - name: "{{name}}-mongodb-data"
          mountPath: "/var/lib/mongodb/data"
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities: {}
          privileged: false
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      volumes:
      - name: "{{name}}-mongodb-data"
        {% if mongodb.persistent %}persistentVolumeClaim:
          claimName: "{{name}}-mongodb"
        {% else %}emptyDir:
          medium: ''
        {% endif %}
        
      - name: custom-init-scripts
        configMap:
          name: "{{name}}-mongodb-init"