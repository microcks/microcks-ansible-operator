kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{name}}-postman-runtime"
  namespace: '{{ meta.namespace }}'
  labels:
    app: "{{name}}"
    container: postman-runtime
    group: microcks
    app.kubernetes.io/name: microcks-postman-runtime
    app.kubernetes.io/instance: "microcks-postman-runtime-{{name}}"
    app.kubernetes.io/version: "{{version}}"
    app.kubernetes.io/component: postman-runtime
    app.kubernetes.io/part-of: "{{name}}"
    app.kubernetes.io/managed-by: microcks-operator
    app.openshift.io/runtime: nodejs
spec:
  replicas: {{postman.replicas|int}}
  selector: 
    matchLabels:  
      app: "{{name}}"
      deployment: "{{name}}-postman-runtime"
      container: postman-runtime
      group: microcks
  template:
    metadata:
      labels:
        app: "{{name}}"
        deployment: "{{name}}-postman-runtime"
        container: postman-runtime
        group: microcks
    spec:
      containers:
      - name: postman-runtime
        image: "{{registry|default('quay.io')}}/microcks/microcks-postman-runtime:0.5.0"
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: info
        resources:
          limits:
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 4
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst