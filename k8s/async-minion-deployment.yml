apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{name}}-async-minion"
  namespace: '{{ meta.namespace }}'
  labels:
    app: "{{name}}"
    container: async-minion
    group: microcks
    app.kubernetes.io/name: microcks-async-minion
    app.kubernetes.io/instance: "microcks-async-minion-{{name}}"
    app.kubernetes.io/version: "{{version}}"
    app.kubernetes.io/component: async-minion
    app.kubernetes.io/part-of: "{{name}}"
    app.kubernetes.io/managed-by: microcks-operator
    app.openshift.io/runtime: quarkus
  annotations:
    app.openshift.io/connects-to: "{{name}}-webapp-microcks"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{name}}"
      deploymentconfig: async-minion
      container: async-minion
      group: microcks
  template:
    metadata:
      labels:
        app: "{{name}}"
        deploymentconfig: async-minion
        container: async-minion
        group: microcks
    spec:
      containers:
      - name: async-minion
        image: "{{registry|default('quay.io')}}/microcks/microcks-async-minion:{{version}}"
        imagePullPolicy: IfNotPresent
        env:
          - name: QUARKUS_PROFILE
            value: kube 
          {% if not features.async.kafka.install|bool %}
            {%- if not features.async.kafka.authentication.type == 'none' %}

          - name: KAFKA_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{features.async.kafka.authentication.truststore_secret_ref.password_key}}
                name: {{features.async.kafka.authentication.truststore_secret_ref.secret|default(name + "-kafka-truststore")}}
            {%- endif %}
            {%- if features.async.kafka.authentication.type == 'SSL' %}

          - name: KAFKA_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{features.async.kafka.authentication.keystore_secret_ref.password_key}}
                name: {{features.async.kafka.authentication.keystore_secret_ref.secret|default(name + "-kafka-keystore")}}
            {%- endif %}
          {% endif %}
          {% if features.async.sqs.region is defined %}
            {%- if features.async.sqs.credentials_type == 'env-variable' %}
              {%- if features.async.sqs.credentials_secret_ref is defined %}

          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{features.async.sqs.credentials_secret_ref.secret}}
                key: {{features.async.sqs.credentials_secret_ref.access_key_id_key|default('access_key_id')}}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{features.async.sqs.credentials_secret_ref.secret}}
                key: {{features.async.sqs.credentials_secret_ref.secret_access_key_key|default('secret_access_key')}}
                  {%- if features.async.sqs.credentials_secret_ref.session_token_key is defined %}

          - name: AWS_SESSION_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{features.async.sqs.credentials_secret_ref.secret}}
                key: {{features.async.sqs.credentials_secret_ref.session_token_key}}
                  {%- endif %}
              {%- endif %}
            {%- endif %}
          {% endif %}
          {% if features.async.sns.region is defined %}
            {%- if features.async.sns.credentials_type == 'env-variable' %}
              {%- if features.async.sns.credentials_secret_ref is defined %}

          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{features.async.sns.credentials_secret_ref.secret}}
                key: {{features.async.sns.credentials_secret_ref.access_key_id_key|default('access_key_id')}}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{features.async.sns.credentials_secret_ref.secret}}
                key: {{features.async.sns.credentials_secret_ref.secret_access_key_key|default('secret_access_key')}}
                  {%- if features.async.sns.credentials_secret_ref.session_token_key is defined %}

          - name: AWS_SESSION_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{features.async.sns.credentials_secret_ref.secret}}
                key: {{features.async.sns.credentials_secret_ref.session_token_key}}
                  {%- endif %}
              {%- endif %}
            {%- endif %}
          {% endif %}

          {% if features.async.env is defined -%}
          {{ features.async.env | to_nice_yaml(indent=10) | trim | indent(10) }}
          {% endif %}

        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: "/q/health/live"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/q/health/ready"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
          - name: "{{name}}-async-minion-config"
            mountPath: "/deployments/config"
          {% if not features.async.kafka.install|bool %}
            {%- if not features.async.kafka.authentication.type == 'none' %}

          - name: "{{name}}-kafka-truststore"
            mountPath: "/deployments/config/kafka/truststore"
            {%- endif %}
            {%- if features.async.kafka.authentication.type == 'SSL' %}

          - name: "{{name}}-kafka-keystore"
            mountPath: "/deployments/config/kafka/keystore"
            {%- endif %}
          {% endif %}
          {% if features.async.googlepubsub.project is defined %}
            {%- if features.async.googlepubsub.service_account_secret_ref is defined %}

          - name: "{{name}}-googlepubsub-sa"
            mountPath: "/deployments/config/googlepubsub/sa"
            {%- endif %}
          {% endif %}
          {% if features.async.sqs.region is defined %}
            {%- if features.async.sqs.credentials_secret_ref is defined and features.async.sqs.credentials_type == 'profile' %}

          - name: "{{name}}-amazonsqs-creds"
            mountPath: "/deployments/config/amazon-sqs"
            {%- endif %}
          {% endif %}
          {% if features.async.sns.region is defined %}
            {%- if features.async.sns.credentials_secret_ref is defined and features.async.sns.credentials_type == 'profile' %}

          - name: "{{name}}-amazonsns-creds"
            mountPath: "/deployments/config/amazon-sns"
            {%- endif %}
          {% endif %}

        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "{{name}}-async-minion-config"
          configMap:
            name: "{{name}}-async-minion-config"
        {% if not features.async.kafka.install|bool %}
          {%- if not features.async.kafka.authentication.type == 'none' %}

        - name: "{{name}}-kafka-truststore"
          secret:
            secretName: "{{features.async.kafka.authentication.truststore_secret_ref.secret}}"
          {%- endif %}
          {%- if features.async.kafka.authentication.type == 'SSL' %}

        - name: "{{name}}-kafka-keystore"
          secret:
            secretName: "{{features.async.kafka.authentication.keystore_secret_ref.secret}}"
          {%- endif %}
        {% endif %}
        {% if features.async.googlepubsub.project is defined %}
          {%- if features.async.googlepubsub.service_account_secret_ref is defined %}

        - name: "{{name}}-googlepubsub-sa"
          secret:
            secretName: "{{features.async.googlepubsub.service_account_secret_ref.secret}}"
          {%- endif %}
        {% endif %}
        {% if features.async.sqs.region is defined %}
          {%- if features.async.sqs.credentials_secret_ref is defined and features.async.sqs.credentials_type == 'profile' %}

        - name: "{{name}}-amazonsqs-creds"
          secret:
            secretName: "{{features.async.sqs.credentials_secret_ref.secret}}"
          {%- endif %}
        {% endif %}
        {% if features.async.sns.region is defined %}
          {%- if features.async.sns.credentials_secret_ref is defined and features.async.sns.credentials_type == 'profile' %}

        - name: "{{name}}-amazonsns-creds"
          secret:
            secretName: "{{features.async.sns.credentials_secret_ref.secret}}"
          {%- endif %}
        {% endif %}